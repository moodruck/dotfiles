ulimit -n 4096
# Bash colors

## Usage
## echo -e "\033[COLORm"
##             or
## printf "\e[COLORm"
##
## color escaping in PS1
## \[\033[COLORm\]

# Reset color 0

## Regular Colors
#         fg   bg
#-----------------
# Black   30   40
# Red     31   41
# Green   32   42
# Yellow  33   43
# Blue    34   44
# Purple  35   45
# Cyan    36   46
# White   37   47

#if tput setaf 1 &> /dev/null; then
   # tput sgr0; # reset colors
   # bold=$(tput bold);
   # reset=$(tput sgr0);
   # # Solarized colors, taken from http://git.io/solarized-colors.
   # black=$(tput setaf 0);
   # blue=$(tput setaf 33);
   # cyan=$(tput setaf 37);
   # green=$(tput setaf 64);
   # orange=$(tput setaf 166);
   # purple=$(tput setaf 125);
   # red=$(tput setaf 124);
   # violet=$(tput setaf 61);
   # white=$(tput setaf 15);
   # yellow=$(tput setaf 136);
#else
    bold='';
    reset='\[\[\e[0m\]';
    black='\[\e[0;30m\]';
    blue='\[\e[0;34m\]';
    cyan='\[\e[0;36m\]';
    green='\[\e[0;32m\]';
    orange='\[\e[0;33m\]';
    purple='\[\e[0;35m\]';
    red='\[\e[0;31m\]';
    violet='\[\e[0;35m\]';
    white='\[\e[0;37m\]';
    yellow='\[\e[0;33m\]';
#fi;
__git_branch_name ()
{
    local b=$(git symbolic-ref HEAD 2>/dev/null)
    echo "${b##*/}"
}

__git_branch_color ()
{
    local c=$green
    local b=`__git_branch_name`
    if [ -n "$b" ]; then
        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null;

        # Check for unpushed commits
        if [ -n "$(git branch -v 2>/dev/null | grep '^*' | grep '\\\[ahead')"]; then
            c=$cyan
        fi;

        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
            c=$yellow
        fi;

        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
            c=$orange
        fi;

        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            c=$red
        fi;
    fi

    echo $c
}

__prompt_git ()
{
    local b=`__git_branch_name`
    if [ -n "$b" ]; then
        echo "${2}(${1}$b${2})"
    else
        local sha="$(git rev-parse --short HEAD 2>/dev/null)"
        if [ -n "$sha" ]; then
            echo "${2}{${3}${sha}${2}}"
        fi
    fi
}

bc=`__git_branch_color`
# Prompt
PS1="${blue}\w "
PS1+="\$(__prompt_git \"${bc}\" \"${white}\" \"${blue}\")"
PS1+="${blue} $ ${reset}"
export PS1

