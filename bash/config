ulimit -n 4096
# Bash colors

## Usage
## echo -e "\033[COLORm"
##             or
## printf "\e[COLORm"
##
## color escaping in PS1
## \[\033[COLORm\]

# Reset color 0

## Regular Colors
#         fg   bg
#-----------------
# Black   30   40
# Red     31   41
# Green   32   42
# Yellow  33   43
# Blue    34   44
# Purple  35   45
# Cyan    36   46
# White   37   47

reset='\[\[\e[0m\]';
black='\[\e[0;30m\]';
blue='\[\e[0;34m\]';
cyan='\[\e[0;36m\]';
green='\[\e[0;32m\]';
orange='\[\e[0;33m\]';
purple='\[\e[0;35m\]';
red='\[\e[0;31m\]';
violet='\[\e[0;35m\]';
white='\[\e[0;37m\]';
yellow='\[\e[0;33m\]';

__git_branch_name ()
{
    local b=$(git symbolic-ref HEAD 2>/dev/null)
    echo "${b##*/}"
}

__prompt_git ()
{
    local b=`__git_branch_name`
    local c="${3}"
    if [ -n "$b" ]; then
        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null;

        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
            c="${4}"
        fi;

        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
            c="${5}"
        fi;

        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            c="${6}"
        fi;

        echo "${1}(${c}$b${1})"
    else
        local sha="$(git rev-parse --short HEAD 2>/dev/null)"
        if [ -n "$sha" ]; then
            echo "${1}{${2}${sha}${1}}"
        fi
    fi
}

bc=`__git_branch_color`
# Prompt
PS1="${blue}\w "
PS1+="\$(__prompt_git \"${white}\" \"${blue}\" \"${cyan}\" \"${yellow}\" \"${orange}\" \"${red}\")\n"
PS1+="${blue} $ ${reset}"
export PS1

